{
	"module": {
		"prefix": "mod",
		"body": [
			"module $1(",
			"  $2",
			");",
			"$3",
			"endmodule // $1"
		],
		"description": "module ... endmodule"
	},
	"always": {
		"prefix": "al",
		"body": [
			"always @($1) begin",
			"  $2",
			"end"
		],
		"description": "always @()"
	},
	"alwaysposclk": {
		"prefix": "alclk",
		"body": [
			"always @(posedge clk $1) begin",
			"  $2",
			"end"
		],
		"description": "always @(posedge clk)"
	},
	"beginend": {
		"prefix": "beginend",
		"body": [
			"begin",
			"  $1",
			"end"
		],
		"description": "begin ... end"
	},
	"case": {
		"prefix": "case",
		"body": [
			"case ($1)",
			"  $2: $3",
			"  default: $4",
			"endcase"
		],
		"description": "case () ... endcase"
	},
	"reg": {
		"prefix": "reg",
		"body": [
			"reg $1;"
		],
		"description": "reg reg_name;"
	},
	"regarray": {
		"prefix": "rega",
		"body": [
			"reg [$1:$2] $3;"
		],
		"description": "reg [N:0] reg_name;"
	},
	"regmemory": {
		"prefix": "regm",
		"body": [
			"reg [$1:$2] $3 [$4:$5];"
		],
		"description": "reg [N:0] reg_name [0:M];"
	},
	"wire": {
		"prefix": "wire",
		"body": [
			"wire $1;"
		],
		"description": "wire wire_name;"
	},
	"wirearray": {
		"prefix": "wirea",
		"body": [
			"wire [$1:$2] $3;"
		],
		"description": "wire [N:0] wire_name;"
	},
	"include": {
		"prefix": "inc",
		"body": [
			"`include \"$1\""
		],
		"description": "`include \"..\""
	},
	"define": {
		"prefix": "def",
		"body": [
			"`def $1 = $2"
		],
		"description": "`define var = val"
	},
	"parameter": {
		"prefix": "param",
		"body": [
			"parameter $1 = $2;"
		],
		"description": "paramter var = val;"
	},
	"ternary": {
		"prefix": "ter",
		"body": [
			"$1 ? $2 : $3"
		],
		"description": "a ? b : c"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ($1) begin",
			"  $2",
			"end"
		],
		"description": "if (...) begin ... end"
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": [
			"if ($1) begin",
			"  $2",
			"end else begin",
			"  $3",
            "end"
		],
		"description": "if (...) begin ... end else begin ... end"
	},
    "for loop": {
		"prefix": "for",
		"body": [
			"for ($1 = $2; $3; $4) begin",
			"  $5",
			"end"
		],
		"description": "for (...) begin ... end"
	},
	"while loop": {
		"prefix": "while",
		"body": [
			"while ($1) begin",
			"  $2",
			"end"
		],
		"description": "while (...) begin ... end"
	},
	"function": {
		"prefix": "func",
		"body": [
			"function $1;",
			"  $2;",
			"  $3",
			"endfunction"
		],
		"description": "function (...) ... endfunction"
	},
	"testbench template": {
		"prefix": "tb",
		"body": [
			"`include \"$1.v\"",
			"`default_nettype none",
			"",
			"module tb_${1};",
			"reg clk;",
			"reg rst_n;",
			"",
			"${1} $3",
			"(",
            "  .rst_n (rst_n),",
            "  .clk (clk),",
			");",
			"",
			"localparam CLK_PERIOD = 10;",
			"always #(CLK_PERIOD/2) clk=~clk;",
			"",
			"initial begin",
			"  $dumpfile(\"tb_${1}.vcd\");",
			"  $dumpvars(0, tb_${1});",
			"end",
			"",
			"initial begin",
			"  #1 rst_n<=1'bx;clk<=1'bx;",
			"  #(CLK_PERIOD*3) rst_n<=1;",
			"  #(CLK_PERIOD*3) rst_n<=0;clk<=0;",
			"  repeat(5) @(posedge clk);",
			"  rst_n<=1;",
			"  @(posedge clk);",
			"  repeat(2) @(posedge clk);",
			"  $finish(2);",
			"end",
			"",
			"endmodule",
			"`default_nettype wire"
		],
		"description": "testbench template"
	}
}
