<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist
  PUBLIC '-//Apple//DTD PLIST 1.0//EN'
  'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>
<plist>
	<dict>
		<key>fileTypes</key>
		<array>
			<string>bsv</string>
		</array>
		<key>foldingStartMarker</key>
		<string>(begin)\s*(//.*)?$</string>
		<key>foldingStopMarker</key>
		<string>^\s*(end)$</string>
		<key>name</key>
		<string>BSV</string>
		<key>patterns</key>
		<array>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.bsv</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>entity.name.package.bsv</string>
					</dict>
				</dict>
				<key>match</key>
				<string>^\s*(import|export|package)\s+\b([a-zA-Z_][a-zA-Z0-9_]*)\b</string>
				<key>name</key>
				<string>meta.entity.package.bsv</string>
			</dict>

			<dict>
				<!-- defparam instancename.parameter = -->
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.other.bsv</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>entity.name.type.instance.bsv</string>
					</dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>meta.module.parameters.bsv</string>
					</dict>
					<key>4</key>
					<dict>
						<key>name</key>
						<string>keyword.other.bsv</string>
					</dict>
				</dict>
				<key>match</key>
				<string>^\s*(defparam)\s+([a-zA-Z_][a-zA-Z0-9_]*)(.[a-zA-Z_][a-zA-Z0-9_]*)\s*(=)</string>
				<key>name</key>
				<string>meta.definition.defparam.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(automatic|cell|config|deassign|defparam|design|disable|edge|endconfig|endgenerate|endspecify|endtable|endtask|event|generate|genvar|ifnone|incdir|include|liblist|library|localparam|macromodule|negedge|noshowcancelled|posedge|pulsestyle_onevent|pulsestyle_ondetect|real|realtime|scalared|showcancelled|specify|specparam|table|task|time|use|vectored)\b</string>
				<key>name</key>
				<string>keyword.other.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(initial|always|wait|force|release|assign)\b</string>
				<key>name</key>
				<string>keyword.control.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(begin|end|fork|join)\b</string>
				<key>name</key>
				<string>keyword.other.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(matches|action|endaction|actionvalue|endactionvalue|ancestor|deriving|return|match|par|endpar|provisos|dependencies|determines|seq|endseq|schedule|port|clock|reset|no_reset|clocked_by|reset_by|default_clock|default_reset|output_clock|output_reset|input_clock|input_reset|same_family|import|numeric|type)\b</string>
				<key>name</key>
				<string>keyword.control.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(TAdd|TSub|TLog|TExp|TMul|TDiv|TMin|TMax)\b</string>
				<key>name</key>
				<string>keyword.typesystem.math.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(Bits|DefaultValue|Eq|Ord|Bounded|Arith|Literal|Bitwise|BitReduction|BitExtend|FShow|IsModule|Add|Max|Log|Mul|Div)\b</string>
				<key>name</key>
				<string>keyword.typesystem.typeclass.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(forever|repeat|while|for|if|else|case|casex|casez|default|endcase)\b</string>
				<key>name</key>
				<string>keyword.control.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(endpackage)\b</string>
				<key>name</key>
				<string>keyword.control.import.bsv</string>
			</dict>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<!-- <string>keyword.other.bsv</string> -->
						<string>meta.preprocessor.bsv</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>entity.name.type.include.bsv</string>
					</dict>
				</dict>
				<key>match</key>
				<string>^\s*(`include)\s+(["&lt;].*["&gt;])</string>
				<key>name</key>
				<string>meta.include.bsv</string>
			</dict>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.bsv</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>constant.other.define.bsv</string>
					</dict>
				</dict>
				<key>match</key>
				<string>^\s*(`ifdef|`ifndef|`undef|`define)\s+([a-zA-Z_][a-zA-Z0-9_]*)\b</string>
				<key>name</key>
				<string>meta.preprocessor.ifdef.bsv</string>
			</dict>
			<dict> <!-- must come after meta.preprocess.ifdef -->
				<key>match</key>
				<string>`(celldefine|default_nettype|define|else|elsif|endcelldefine|endif|ifdef|ifndef|include|line|nounconnected_drive|resetall|timescale|unconnected_drive|undef)\b</string>
				<key>name</key>
				<string>meta.preprocessor.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>[.][_a-zA-Z0-9]+</string>
				<key>name</key>
				<string>meta.module.parameters.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(True|False)\b</string>
				<key>name</key>
				<string>constant.language.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>`\b([a-zA-Z_][a-zA-Z0-9_]*)\b</string>
				<key>name</key>
				<string>constant.other.define.bsv</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#comments</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#pragma-compiler-bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(let|module|endmodule|rule|endrule|rules|endrules|interface|endinterface|method|endmethod|function|endfunction|instance|endinstance|typeclass|endtypeclass|primitive|endprimitive)\b</string>
				<key>name</key>
				<string>storage.type.bsv</string>
			</dict>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>entity.name.state.bsv</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.operator.bitwise.bsv</string>
					</dict>
				</dict>
				<key>match</key>
				<string>(?:^|\{|,)\s*\b(?!endmodule|endrule|endinterface|endmethod|endfunction|endinstance|endtypeclass)\b([a-zA-Z_][a-zA-Z0-9_]*)\b\s*(:)(?!:)\s*</string>
				<key>name</key>
				<string>meta.case.bsv</string><!-- or struct member in type constructor -->
			</dict>
			<dict>
				<key>include</key>
				<string>#all-types</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(==|===|!=|!==|&lt;=|&gt;=|&lt;|&gt;)</string>
				<key>name</key>
				<string>keyword.operator.comparison.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(\-|\+|\*|\/|%)</string>
				<key>name</key>
				<string>keyword.operator.arithmetic.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(!|&amp;&amp;|\|\||\bor\b)</string>
				<key>name</key>
				<string>keyword.operator.logical.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(&amp;|\||\^|~|&lt;&lt;|&gt;&gt;|\?|:)</string>
				<key>name</key>
				<string>keyword.operator.bitwise.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>({|})</string>
				<key>name</key>
				<string>keyword.operator.parenthesis.curly.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(\(|\))</string>
				<key>name</key>
				<string>keyword.operator.parenthesis.round.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(\[|\])</string>
				<key>name</key>
				<string>keyword.operator.parenthesis.square.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>([;,])</string>
				<key>name</key>
				<string>keyword.delimiter.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(#|@|=)</string>
				<key>name</key>
				<string>keyword.other.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(output|input|inout|and|nand|nor|or|xor|xnor|buf|not|bufif[01]|notif[01]|r?[npc]mos|tran|r?tranif[01]|pullup|pulldown)\b</string>
				<key>name</key>
				<string>support.type.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(?i:(\d+\.\d*(e[\-\+]?\d+)?))(?=[^a-zA-Z_])</string>
				<key>name</key>
				<string>constant.numeric.real.bsv</string>
			</dict>
			<dict>
				<key>match</key>
				<string>((\b\d+)?'s?([bB]\s*(([0-1_xXzZ?]+)|(`[A-Z]+[_0-9a-zA-Z]*))|[oO]\s*(([0-7_xXzZ?]+)|(`[A-Z]+[_0-9a-zA-Z]*))|[dD]\s*(([0-9_xXzZ?]+)|(`[A-Z]+[_0-9a-zA-Z]*))|[hH]\s*(([0-9a-fA-F_xXzZ?]+)|(`[A-Z]+[_0-9a-zA-Z]*)))((e|E)(\+|-)?[0-9]+)?\b)|(\b\d+\b)</string>
				<key>name</key>
				<string>constant.numeric.bsv</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#strings</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\$\b([a-zA-Z_][a-zA-Z0-9_]*)\b</string>
				<key>name</key>
				<string>support.function.bsv</string>
			</dict>
			<!-- capital constants
			<dict>
				<key>match</key>
				<string>\b([A-Z][A-Z0-9_]+)\b</string>
				<key>name</key>
				<string>constant.other.bsv</string>
			</dict>
			-->
		</array>
		<key>repository</key>
		<dict>
			<key>all-types</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#storage-type-bsv</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#storage-type-standard-bsv</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#storage-modifier-bsv</string>
					</dict>
				</array>
			</dict>
			<key>comments</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>/\*</string>
						<key>captures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.bsv</string>
							</dict>
						</dict>
						<key>end</key>
						<string>\*/</string>
						<key>name</key>
						<string>comment.block.bsv</string>
					</dict>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.bsv</string>
							</dict>
						</dict>
						<key>match</key>
						<string>(//).*$\n?</string>
						<key>name</key>
						<string>comment.line.double-slash.bsv</string>
					</dict>
				</array>
			</dict>
			<key>pragma-compiler-bsv</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>\(\*</string>
						<key>captures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.bsv</string>
							</dict>
						</dict>
						<key>end</key>
						<string>\*\)</string>
						<key>name</key>
						<string>pragma.compiler.bsv</string>
					</dict>
				</array>
			</dict>
			<key>storage-type-bsv</key>
			<dict>
				<key>match</key>
				<string>\b(wire|tri|tri[01]|supply[01]|wand|triand|wor|trior|trireg|reg|parameter|integer|typedef|struct|enum|tagged|union)\b</string>
				<key>name</key>
				<string>storage.type.bsv</string>
			</dict>
			<key>storage-type-standard-bsv</key>
			<dict>
				<key>match</key>
				<string>\b(void|Action|ActionValue|Integer|Nat|Real|Inout|Bit|UInt|Int|Bool|Maybe|String|Either|Rules|Module|Clock|Reset|Power|Empty|Array|Reg|RWire|Wire|BypassWire|DWire|PulseWire|ReadOnly|WriteOnly|Vector|List|RegFile|FIFO|FIFOF|Stmt)\b</string>
				<key>name</key>
				<string>storage.type.standard.bsv</string>
			</dict>
			<key>storage-modifier-bsv</key>
			<dict>
				<key>match</key>
				<string>\b(signed|unsigned|small|medium|large|supply[01]|strong[01]|pull[01]|weak[01]|highz[01])\b</string>
				<key>name</key>
				<string>storage.modifier.bsv</string>
			</dict>
			<key>strings</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>"</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.begin.bsv</string>
							</dict>
						</dict>
						<key>end</key>
						<string>"</string>
						<key>endCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.end.bsv</string>
							</dict>
						</dict>
						<key>name</key>
						<string>string.quoted.double.bsv</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>match</key>
								<string>\\.</string>
								<key>name</key>
								<string>constant.character.escape.bsv</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
		</dict>
		<key>scopeName</key>
		<string>source.bsv</string>
		<key>uuid</key>
		<string>7038ab7c-665d-45a4-a700-4ca5e113d9a6</string>
	</dict>
</plist>